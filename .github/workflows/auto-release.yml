name: Auto Release

on:
  push:
    branches: [ main, master ]
    paths-ignore:
      - '**.md'
      - '.gitignore'
      - 'docs/**'
  workflow_dispatch:

jobs:
  auto-release:
    runs-on: windows-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 获取完整的git历史
        
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        if (Test-Path "requirements.txt") {
          pip install -r requirements.txt
        }
        pip install pyinstaller
      shell: pwsh
      
    - name: Verify required files
      run: |
        Write-Host "Checking required files..."
        $requiredFiles = @("main_gui.py", "start_gui.py", "models.py", "file_manager.py", "logo.ico")
        foreach ($file in $requiredFiles) {
          if (Test-Path $file) {
            Write-Host "✓ Found file: $file"
          } else {
            Write-Host "✗ Missing file: $file"
            exit 1
          }
        }
      shell: pwsh
      
    - name: Build EXE with PyInstaller
      run: |
        Write-Host "Starting EXE build..."
        python build_exe.py
      shell: pwsh
      env:
        CI: true
        GITHUB_ACTIONS: true
        PYTHONIOENCODING: utf-8
        PYTHONUTF8: 1
        
    - name: Verify build output
      run: |
        if (Test-Path "dist\按键小精灵.exe") {
          Write-Host "EXE file built successfully"
          $fileSize = (Get-Item 'dist\按键小精灵.exe').Length / 1MB
          Write-Host "File size: $([math]::Round($fileSize, 2)) MB"
        } else {
          Write-Host "EXE file build failed"
          exit 1
        }
      shell: pwsh
      
    - name: Generate version tag
      id: version
      run: |
        # 生成基于日期和时间的版本号
        $date = Get-Date -Format "yyyy.MM.dd"
        $time = Get-Date -Format "HHmm"
        $version = "v$date-$time"
        Write-Host "Generated version: $version"
        echo "version=$version" >> $env:GITHUB_OUTPUT
        echo "date=$date" >> $env:GITHUB_OUTPUT
      shell: pwsh
      
    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: "按键小精灵 ${{ steps.version.outputs.date }}"
        body: |
          ## 🎉 按键小精灵自动构建版本
          
          **构建日期**: ${{ steps.version.outputs.date }}
          **构建时间**: $(Get-Date -Format "HH:mm")
          **提交**: ${{ github.sha }}
          
          ### 📦 下载文件
          - `按键小精灵.exe` - 主程序（包含logo.ico图标）
          - 配置文件和资源文件
          
          ### 🚀 使用方法
          1. 下载 `按键小精灵.exe`
          2. 双击运行即可使用
          3. 首次运行会自动创建配置文件
          
          ### 📝 更新日志
          最新提交的更改已包含在此版本中。
          
          ---
          *此版本由 GitHub Actions 自动构建*
        draft: false
        prerelease: false
        files: |
          dist/按键小精灵.exe
          dist/*.png
          dist/*.json
        generate_release_notes: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Upload build artifacts (backup)
      uses: actions/upload-artifact@v4
      with:
        name: keymouse-spirit-backup-${{ steps.version.outputs.version }}
        path: |
          dist/按键小精灵.exe
          dist/*.png
          dist/*.json
        retention-days: 30
